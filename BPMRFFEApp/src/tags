!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ARRAY_SIZE	drvBPMRFFE.h	23;"	d
BPM_NUMBER_MAX	drvBPMRFFE.h	30;"	d
BPM_NUMBER_MIN	drvBPMRFFE.h	29;"	d
FIRST_COMMAND	drvBPMRFFE.h	220;"	d
LAST_COMMAND	drvBPMRFFE.h	240;"	d
MAX_ADDR	drvBPMRFFE.h	32;"	d
MAX_BPMS	drvBPMRFFE.h	27;"	d
MAX_BPM_PER_SLOT	drvBPMRFFE.h	26;"	d
MAX_SLOTS	drvBPMRFFE.h	25;"	d
NUM_PARAMS	drvBPMRFFE.h	272;"	d
PROD_IOC	Makefile	/^PROD_IOC = BPMRFFE$/;"	m
P_RffeAtt	drvBPMRFFE.h	/^        int P_RffeAtt;$/;"	m	class:drvBPMRFFE
P_RffeAttString	drvBPMRFFE.h	145;"	d
P_RffeHeaterAC	drvBPMRFFE.h	/^        int P_RffeHeaterAC;$/;"	m	class:drvBPMRFFE
P_RffeHeaterACString	drvBPMRFFE.h	151;"	d
P_RffeHeaterBD	drvBPMRFFE.h	/^        int P_RffeHeaterBD;$/;"	m	class:drvBPMRFFE
P_RffeHeaterBDString	drvBPMRFFE.h	152;"	d
P_RffePidACKp	drvBPMRFFE.h	/^        int P_RffePidACKp;$/;"	m	class:drvBPMRFFE
P_RffePidACKpString	drvBPMRFFE.h	159;"	d
P_RffePidACTd	drvBPMRFFE.h	/^        int P_RffePidACTd;$/;"	m	class:drvBPMRFFE
P_RffePidACTdString	drvBPMRFFE.h	161;"	d
P_RffePidACTi	drvBPMRFFE.h	/^        int P_RffePidACTi;$/;"	m	class:drvBPMRFFE
P_RffePidACTiString	drvBPMRFFE.h	160;"	d
P_RffePidBDKp	drvBPMRFFE.h	/^        int P_RffePidBDKp;$/;"	m	class:drvBPMRFFE
P_RffePidBDKpString	drvBPMRFFE.h	162;"	d
P_RffePidBDTd	drvBPMRFFE.h	/^        int P_RffePidBDTd;$/;"	m	class:drvBPMRFFE
P_RffePidBDTdString	drvBPMRFFE.h	164;"	d
P_RffePidBDTi	drvBPMRFFE.h	/^        int P_RffePidBDTi;$/;"	m	class:drvBPMRFFE
P_RffePidBDTiString	drvBPMRFFE.h	163;"	d
P_RffeRst	drvBPMRFFE.h	/^        int P_RffeRst;$/;"	m	class:drvBPMRFFE
P_RffeRstString	drvBPMRFFE.h	153;"	d
P_RffeSetPointAC	drvBPMRFFE.h	/^        int P_RffeSetPointAC;$/;"	m	class:drvBPMRFFE
P_RffeSetPointACString	drvBPMRFFE.h	148;"	d
P_RffeSetPointBD	drvBPMRFFE.h	/^        int P_RffeSetPointBD;$/;"	m	class:drvBPMRFFE
P_RffeSetPointBDString	drvBPMRFFE.h	149;"	d
P_RffeTempAC	drvBPMRFFE.h	/^        int P_RffeTempAC;$/;"	m	class:drvBPMRFFE
P_RffeTempACString	drvBPMRFFE.h	146;"	d
P_RffeTempBD	drvBPMRFFE.h	/^        int P_RffeTempBD;$/;"	m	class:drvBPMRFFE
P_RffeTempBDString	drvBPMRFFE.h	147;"	d
P_RffeTempCtl	drvBPMRFFE.h	/^        int P_RffeTempCtl;$/;"	m	class:drvBPMRFFE
P_RffeTempCtlString	drvBPMRFFE.h	150;"	d
SERVICE_NAME_SIZE	drvBPMRFFE.cpp	27;"	d	file:
TOP	Makefile	/^TOP=..\/..$/;"	m
_executeHwReadFunction	drvBPMRFFE.h	/^    executeHwReadFunctionFp _executeHwReadFunction;$/;"	m	struct:functionsAny_t
_executeHwWriteFunction	drvBPMRFFE.h	/^    executeHwWriteFunctionFp _executeHwWriteFunction;$/;"	m	struct:functionsAny_t
_functionFp	drvBPMRFFE.h	/^    any _functionFp;$/;"	m	struct:functionsAny_t
_getServiceNameFromFunc	drvBPMRFFE.h	/^    getServiceNameFromFuncFp _getServiceNameFromFunc;$/;"	m	struct:functionsAny_t
argFloat64	drvBPMRFFE.h	/^        epicsFloat64 argFloat64;$/;"	m	union:__anon4::__anon5
argUInt32	drvBPMRFFE.h	/^        epicsUInt32 argUInt32;$/;"	m	union:__anon4::__anon5
board	drvBPMRFFE.h	/^    int board;$/;"	m	struct:__anon1
boardMap	drvBPMRFFE.cpp	/^static const boardMap_t boardMap[MAX_BPMS+1] = {$/;"	v	file:
boardMap_t	drvBPMRFFE.h	/^} boardMap_t;$/;"	t	typeref:struct:__anon1
bpm	drvBPMRFFE.h	/^    int bpm;$/;"	m	struct:__anon1
bpmClientConnect	drvBPMRFFE.cpp	/^asynStatus drvBPMRFFE::bpmClientConnect(void)$/;"	f	class:drvBPMRFFE
bpmClientDisconnect	drvBPMRFFE.cpp	/^asynStatus drvBPMRFFE::bpmClientDisconnect(void)$/;"	f	class:drvBPMRFFE
bpmClientRFFE	drvBPMRFFE.h	/^        halcs_client_t *bpmClientRFFE;$/;"	m	class:drvBPMRFFE
bpmNumber	drvBPMRFFE.h	/^        int bpmNumber;$/;"	m	class:drvBPMRFFE
bpmPortName	drvBPMRFFE.h	/^        char *bpmPortName;$/;"	m	class:drvBPMRFFE
bpmRFFEHwFunc	drvBPMRFFE.h	/^        std::unordered_map<int, functionsAny_t> bpmRFFEHwFunc;$/;"	m	class:drvBPMRFFE
bpmSetGetRffeAttFunc	drvBPMRFFE.cpp	/^static const functionsAny_t bpmSetGetRffeAttFunc =        {functionsFloat64_t{"RFFE", halcs_set_rffe_att, halcs_get_rffe_att}};$/;"	v	file:
bpmSetGetRffeHeaterACFunc	drvBPMRFFE.cpp	/^static const functionsAny_t bpmSetGetRffeHeaterACFunc =   {functionsFloat64_t{"RFFE", halcs_set_rffe_heater_ac, halcs_get_rffe_heater_ac}};$/;"	v	file:
bpmSetGetRffeHeaterBDFunc	drvBPMRFFE.cpp	/^static const functionsAny_t bpmSetGetRffeHeaterBDFunc =   {functionsFloat64_t{"RFFE", halcs_set_rffe_heater_bd, halcs_get_rffe_heater_bd}};$/;"	v	file:
bpmSetGetRffePidACKpFunc	drvBPMRFFE.cpp	/^static const functionsAny_t bpmSetGetRffePidACKpFunc =    {functionsFloat64_t{"RFFE", halcs_set_rffe_pid_ac_kp, halcs_get_rffe_pid_ac_kp}};$/;"	v	file:
bpmSetGetRffePidACTdFunc	drvBPMRFFE.cpp	/^static const functionsAny_t bpmSetGetRffePidACTdFunc =    {functionsFloat64_t{"RFFE", halcs_set_rffe_pid_ac_td, halcs_get_rffe_pid_ac_td}};$/;"	v	file:
bpmSetGetRffePidACTiFunc	drvBPMRFFE.cpp	/^static const functionsAny_t bpmSetGetRffePidACTiFunc =    {functionsFloat64_t{"RFFE", halcs_set_rffe_pid_ac_ti, halcs_get_rffe_pid_ac_ti}};$/;"	v	file:
bpmSetGetRffePidBDKpFunc	drvBPMRFFE.cpp	/^static const functionsAny_t bpmSetGetRffePidBDKpFunc =    {functionsFloat64_t{"RFFE", halcs_set_rffe_pid_bd_kp, halcs_get_rffe_pid_bd_kp}};$/;"	v	file:
bpmSetGetRffePidBDTdFunc	drvBPMRFFE.cpp	/^static const functionsAny_t bpmSetGetRffePidBDTdFunc =    {functionsFloat64_t{"RFFE", halcs_set_rffe_pid_bd_td, halcs_get_rffe_pid_bd_td}};$/;"	v	file:
bpmSetGetRffePidBDTiFunc	drvBPMRFFE.cpp	/^static const functionsAny_t bpmSetGetRffePidBDTiFunc =    {functionsFloat64_t{"RFFE", halcs_set_rffe_pid_bd_ti, halcs_get_rffe_pid_bd_ti}};$/;"	v	file:
bpmSetGetRffeRstFunc	drvBPMRFFE.cpp	/^static const functionsAny_t bpmSetGetRffeRstFunc =     {functionsInt32_t{"RFFE", halcs_set_rffe_reset_compat, halcs_get_rffe_reset_compat}};$/;"	v	file:
bpmSetGetRffeSetPointACFunc	drvBPMRFFE.cpp	/^static const functionsAny_t bpmSetGetRffeSetPointACFunc = {functionsFloat64_t{"RFFE", halcs_set_rffe_set_point_ac, halcs_get_rffe_set_point_ac}};$/;"	v	file:
bpmSetGetRffeSetPointBDFunc	drvBPMRFFE.cpp	/^static const functionsAny_t bpmSetGetRffeSetPointBDFunc = {functionsFloat64_t{"RFFE", halcs_set_rffe_set_point_bd, halcs_get_rffe_set_point_bd}};$/;"	v	file:
bpmSetGetRffeTempACFunc	drvBPMRFFE.cpp	/^static const functionsAny_t bpmSetGetRffeTempACFunc =     {functionsFloat64_t{"RFFE", NULL, halcs_get_rffe_temp_ac}};$/;"	v	file:
bpmSetGetRffeTempBDFunc	drvBPMRFFE.cpp	/^static const functionsAny_t bpmSetGetRffeTempBDFunc =     {functionsFloat64_t{"RFFE", NULL, halcs_get_rffe_temp_bd}};$/;"	v	file:
bpmSetGetRffeTempCtlFunc	drvBPMRFFE.cpp	/^static const functionsAny_t bpmSetGetRffeTempCtlFunc = {functionsInt32_t{"RFFE", halcs_set_rffe_temp_control_compat, halcs_get_rffe_temp_control_compat}};$/;"	v	file:
connect	drvBPMRFFE.cpp	/^asynStatus drvBPMRFFE::connect(asynUser* pasynUser)$/;"	f	class:drvBPMRFFE
disconnect	drvBPMRFFE.cpp	/^asynStatus drvBPMRFFE::disconnect(asynUser* pasynUser)$/;"	f	class:drvBPMRFFE
doExecuteHwReadFunction	drvBPMRFFE.cpp	/^asynStatus drvBPMRFFE::doExecuteHwReadFunction(functionsFloat64_t &func, char *service,$/;"	f	class:drvBPMRFFE
doExecuteHwReadFunction	drvBPMRFFE.cpp	/^asynStatus drvBPMRFFE::doExecuteHwReadFunction(functionsInt32_t &func, char *service,$/;"	f	class:drvBPMRFFE
doExecuteHwWriteFunction	drvBPMRFFE.cpp	/^asynStatus drvBPMRFFE::doExecuteHwWriteFunction(functionsFloat64_t &func, char *service,$/;"	f	class:drvBPMRFFE
doExecuteHwWriteFunction	drvBPMRFFE.cpp	/^asynStatus drvBPMRFFE::doExecuteHwWriteFunction(functionsInt32_t &func, char *service,$/;"	f	class:drvBPMRFFE
doGetServiceNameFromFunc	drvBPMRFFE.h	/^        const char *doGetServiceNameFromFunc (functionsFloat64_t &func) const$/;"	f	class:drvBPMRFFE
doGetServiceNameFromFunc	drvBPMRFFE.h	/^        const char *doGetServiceNameFromFunc (functionsInt32_t &func) const$/;"	f	class:drvBPMRFFE
driverName	drvBPMRFFE.cpp	/^static const char *driverName="drvBPMRFFE";$/;"	v	file:
drvBPMRFFE	drvBPMRFFE.cpp	/^drvBPMRFFE::drvBPMRFFE(const char *portName, const char *endpoint, int bpmNumber,$/;"	f	class:drvBPMRFFE
drvBPMRFFE	drvBPMRFFE.h	/^class drvBPMRFFE : public asynPortDriver {$/;"	c
drvBPMRFFEConfigure	drvBPMRFFE.cpp	/^    int drvBPMRFFEConfigure(const char *portName, const char *endpoint,$/;"	f
drvBPMRFFERegister	drvBPMRFFE.cpp	/^    epicsExportRegistrar(drvBPMRFFERegister);$/;"	v
drvBPMRFFERegister	drvBPMRFFE.cpp	/^    void drvBPMRFFERegister(void)$/;"	f
endpoint	drvBPMRFFE.h	/^        char *endpoint;$/;"	m	class:drvBPMRFFE
executeHwRead	drvBPMRFFE.h	/^    asynStatus executeHwRead(const drvBPMRFFE& drvBPMRFFE, char *service,$/;"	f	struct:functionsAny_t
executeHwReadFunction	drvBPMRFFE.cpp	/^asynStatus drvBPMRFFE::executeHwReadFunction(int functionId, int addr,$/;"	f	class:drvBPMRFFE
executeHwReadFunction	drvBPMRFFE.h	/^asynStatus functionsAny_t::executeHwReadFunction(const drvBPMRFFE& drvBPMRFFE,$/;"	f	class:functionsAny_t
executeHwReadFunctionFp	drvBPMRFFE.h	/^    typedef asynStatus (functionsAny_t::*executeHwReadFunctionFp)$/;"	t	struct:functionsAny_t
executeHwWrite	drvBPMRFFE.h	/^    asynStatus executeHwWrite(const drvBPMRFFE& drvBPMRFFE, char *service,$/;"	f	struct:functionsAny_t
executeHwWriteFunction	drvBPMRFFE.cpp	/^asynStatus drvBPMRFFE::executeHwWriteFunction(int functionId, int addr,$/;"	f	class:drvBPMRFFE
executeHwWriteFunction	drvBPMRFFE.h	/^asynStatus functionsAny_t::executeHwWriteFunction(const drvBPMRFFE& drvBPMRFFE,$/;"	f	class:functionsAny_t
executeHwWriteFunctionFp	drvBPMRFFE.h	/^    typedef asynStatus (functionsAny_t::*executeHwWriteFunctionFp)$/;"	t	struct:functionsAny_t
exitHandlerC	drvBPMRFFE.cpp	/^static void exitHandlerC(void *pPvt)$/;"	f	file:
functionsAny_t	drvBPMRFFE.h	/^        functionsAny_t(T const& functionFp) :$/;"	f	struct:functionsAny_t
functionsAny_t	drvBPMRFFE.h	/^struct functionsAny_t {$/;"	s
functionsArgs_t	drvBPMRFFE.h	/^} functionsArgs_t;$/;"	t	typeref:struct:__anon4
functionsFloat64_t	drvBPMRFFE.h	/^} functionsFloat64_t;$/;"	t	typeref:struct:__anon2
functionsInt32_t	drvBPMRFFE.h	/^} functionsInt32_t;$/;"	t	typeref:struct:__anon3
getFullServiceName	drvBPMRFFE.cpp	/^asynStatus drvBPMRFFE::getFullServiceName (int bpmNumber, int addr, const char *serviceName,$/;"	f	class:drvBPMRFFE
getParam32	drvBPMRFFE.cpp	/^asynStatus drvBPMRFFE::getParam32(int functionId, epicsUInt32 *param,$/;"	f	class:drvBPMRFFE
getParamDouble	drvBPMRFFE.cpp	/^asynStatus drvBPMRFFE::getParamDouble(int functionId, epicsFloat64 *param, int addr)$/;"	f	class:drvBPMRFFE
getServiceID	drvBPMRFFE.cpp	/^asynStatus drvBPMRFFE::getServiceID (int bpmNumber, int addr, const char *serviceName,$/;"	f	class:drvBPMRFFE
getServiceName	drvBPMRFFE.h	/^    const char *getServiceName(const drvBPMRFFE& drvBPMRFFE)$/;"	f	struct:functionsAny_t
getServiceNameFromFunc	drvBPMRFFE.h	/^const char *functionsAny_t::getServiceNameFromFunc(const drvBPMRFFE& drvBPMRFFE,$/;"	f	class:functionsAny_t
halcs_get_rffe_reset_compat	drvBPMRFFE.cpp	/^halcs_client_err_e halcs_get_rffe_reset_compat (halcs_client_t *self, char *service,$/;"	f
halcs_get_rffe_temp_control_compat	drvBPMRFFE.cpp	/^halcs_client_err_e halcs_get_rffe_temp_control_compat (halcs_client_t *self, char *service,$/;"	f
halcs_set_rffe_reset_compat	drvBPMRFFE.cpp	/^halcs_client_err_e halcs_set_rffe_reset_compat (halcs_client_t *self, char *service,$/;"	f
halcs_set_rffe_temp_control_compat	drvBPMRFFE.cpp	/^halcs_client_err_e halcs_set_rffe_temp_control_compat (halcs_client_t *self, char *service,$/;"	f
initArg0	drvBPMRFFE.cpp	/^    static const iocshArg initArg0 = { "portName", iocshArgString};$/;"	v	file:
initArg1	drvBPMRFFE.cpp	/^    static const iocshArg initArg1 = { "endpoint", iocshArgString};$/;"	v	file:
initArg2	drvBPMRFFE.cpp	/^    static const iocshArg initArg2 = { "bpmNumber", iocshArgInt};$/;"	v	file:
initArg3	drvBPMRFFE.cpp	/^    static const iocshArg initArg3 = { "verbose", iocshArgInt};$/;"	v	file:
initArg4	drvBPMRFFE.cpp	/^    static const iocshArg initArg4 = { "timeout", iocshArgInt};$/;"	v	file:
initArgs	drvBPMRFFE.cpp	/^    static const iocshArg * const initArgs[] = {&initArg0,$/;"	v	file:
initCallFunc	drvBPMRFFE.cpp	/^    static void initCallFunc(const iocshArgBuf *args)$/;"	f	file:
initFuncDef	drvBPMRFFE.cpp	/^    static const iocshFuncDef initFuncDef = {"drvBPMRFFEConfigure",5,initArgs};$/;"	v	file:
main	BPMRFFEMain.cpp	/^int main(int argc,char *argv[])$/;"	f
read	drvBPMRFFE.h	/^    readFloat64Fp read;$/;"	m	struct:__anon2
read	drvBPMRFFE.h	/^    readInt32Fp read;$/;"	m	struct:__anon3
readFloat64	drvBPMRFFE.cpp	/^asynStatus drvBPMRFFE::readFloat64(asynUser *pasynUser, epicsFloat64 *value)$/;"	f	class:drvBPMRFFE
readFloat64Fp	drvBPMRFFE.h	/^typedef halcs_client_err_e (*readFloat64Fp)(halcs_client_t *self, char *service,$/;"	t
readFloat64Params	drvBPMRFFE.cpp	/^asynStatus drvBPMRFFE::readFloat64Params(int addr)$/;"	f	class:drvBPMRFFE
readInt32Fp	drvBPMRFFE.h	/^typedef halcs_client_err_e (*readInt32Fp)(halcs_client_t *self, char *service,$/;"	t
readUInt32Digital	drvBPMRFFE.cpp	/^asynStatus drvBPMRFFE::readUInt32Digital(asynUser *pasynUser, epicsUInt32 *value,$/;"	f	class:drvBPMRFFE
readUInt32Params	drvBPMRFFE.cpp	/^asynStatus drvBPMRFFE::readUInt32Params(int mask, int addr)$/;"	f	class:drvBPMRFFE
serviceName	drvBPMRFFE.h	/^    const char *serviceName;$/;"	m	struct:__anon2
serviceName	drvBPMRFFE.h	/^    const char *serviceName;$/;"	m	struct:__anon3
setParam32	drvBPMRFFE.cpp	/^asynStatus drvBPMRFFE::setParam32(int functionId, epicsUInt32 mask, int addr)$/;"	f	class:drvBPMRFFE
setParamDouble	drvBPMRFFE.cpp	/^asynStatus drvBPMRFFE::setParamDouble(int functionId, int addr)$/;"	f	class:drvBPMRFFE
timeout	drvBPMRFFE.h	/^        int timeout;$/;"	m	class:drvBPMRFFE
updateDoubleParams	drvBPMRFFE.cpp	/^asynStatus drvBPMRFFE::updateDoubleParams(int addr, int firstParam, int lastParam,$/;"	f	class:drvBPMRFFE
updateUInt32Params	drvBPMRFFE.cpp	/^asynStatus drvBPMRFFE::updateUInt32Params(epicsUInt32 mask, int addr, int firstParam,$/;"	f	class:drvBPMRFFE
verbose	drvBPMRFFE.h	/^        int verbose;$/;"	m	class:drvBPMRFFE
write	drvBPMRFFE.h	/^    writeFloat64Fp write;$/;"	m	struct:__anon2
write	drvBPMRFFE.h	/^    writeInt32Fp write;$/;"	m	struct:__anon3
writeFloat64	drvBPMRFFE.cpp	/^asynStatus drvBPMRFFE::writeFloat64(asynUser *pasynUser, epicsFloat64 value)$/;"	f	class:drvBPMRFFE
writeFloat64Fp	drvBPMRFFE.h	/^typedef halcs_client_err_e (*writeFloat64Fp)(halcs_client_t *self, char *service,$/;"	t
writeInt32Fp	drvBPMRFFE.h	/^typedef halcs_client_err_e (*writeInt32Fp)(halcs_client_t *self, char *service,$/;"	t
writeUInt32Digital	drvBPMRFFE.cpp	/^asynStatus drvBPMRFFE::writeUInt32Digital(asynUser *pasynUser, epicsUInt32 value,$/;"	f	class:drvBPMRFFE
~drvBPMRFFE	drvBPMRFFE.cpp	/^drvBPMRFFE::~drvBPMRFFE()$/;"	f	class:drvBPMRFFE
